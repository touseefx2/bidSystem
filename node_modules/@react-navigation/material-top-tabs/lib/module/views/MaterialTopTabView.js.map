{"version":3,"sources":["MaterialTopTabView.tsx"],"names":["TabActions","useTheme","React","TabView","MaterialTopTabBar","MaterialTopTabView","tabBar","props","state","navigation","descriptors","sceneContainerStyle","rest","colors","renderTabBar","index","dispatch","jumpTo","routes","name","target","key","route","render","options","lazyPlaceholder","lazy","emit","type","backgroundColor","background"],"mappings":";;AAAA,SAGEA,UAHF,EAKEC,QALF,QAMO,0BANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAA6BC,OAA7B,QAA4C,uBAA5C;AAQA,OAAOC,iBAAP,MAA8B,qBAA9B;AAQA,eAAe,SAASC,kBAAT,CAA4B;AACzCC,EAAAA,MAAM,GAAIC,KAAD,iBAAmC,oBAAC,iBAAD,EAAuBA,KAAvB,CADH;AAEzCC,EAAAA,KAFyC;AAGzCC,EAAAA,UAHyC;AAIzCC,EAAAA,WAJyC;AAKzCC,EAAAA,mBALyC;AAMzC,KAAGC;AANsC,CAA5B,EAOL;AACR,QAAM;AAAEC,IAAAA;AAAF,MAAaZ,QAAQ,EAA3B;;AAEA,QAAMa,YAAY,GAAIP,KAAD,IAA+B;AAClD,WAAOD,MAAM,CAAC,EACZ,GAAGC,KADS;AAEZC,MAAAA,KAAK,EAAEA,KAFK;AAGZC,MAAAA,UAAU,EAAEA,UAHA;AAIZC,MAAAA,WAAW,EAAEA;AAJD,KAAD,CAAb;AAMD,GAPD;;AASA,sBACE,oBAAC,OAAD,eACME,IADN;AAEE,IAAA,aAAa,EAAGG,KAAD,IACbN,UAAU,CAACO,QAAX,CAAoB,EAClB,GAAGhB,UAAU,CAACiB,MAAX,CAAkBT,KAAK,CAACU,MAAN,CAAaH,KAAb,EAAoBI,IAAtC,CADe;AAElBC,MAAAA,MAAM,EAAEZ,KAAK,CAACa;AAFI,KAApB,CAHJ;AAQE,IAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAeZ,WAAW,CAACY,KAAK,CAACD,GAAP,CAAX,CAAuBE,MAAvB,EAR9B;AASE,IAAA,eAAe,EAAEf,KATnB;AAUE,IAAA,YAAY,EAAEM,YAVhB;AAWE,IAAA,qBAAqB,EAAE,CAAC;AAAEQ,MAAAA;AAAF,KAAD;AAAA;;AAAA,gEACrB,0BAAAZ,WAAW,CAACY,KAAK,CAACD,GAAP,CAAX,CAAuBG,OAAvB,EAA+BC,eADV,2DACrB,mDADqB,yEACiC,IADjC;AAAA,KAXzB;AAcE,IAAA,IAAI,EAAE,CAAC;AAAEH,MAAAA;AAAF,KAAD,KAAeZ,WAAW,CAACY,KAAK,CAACD,GAAP,CAAX,CAAuBG,OAAvB,CAA+BE,IAA/B,KAAwC,IAd/D;AAeE,IAAA,YAAY,EAAE,MAAMjB,UAAU,CAACkB,IAAX,CAAgB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAhB,CAftB;AAgBE,IAAA,UAAU,EAAE,MAAMnB,UAAU,CAACkB,IAAX,CAAgB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAhB,CAhBpB;AAiBE,IAAA,mBAAmB,EAAE,CACnB;AAAEC,MAAAA,eAAe,EAAEhB,MAAM,CAACiB;AAA1B,KADmB,EAEnBnB,mBAFmB;AAjBvB,KADF;AAwBD","sourcesContent":["import {\n  ParamListBase,\n  Route,\n  TabActions,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { SceneRendererProps, TabView } from 'react-native-tab-view';\n\nimport type {\n  MaterialTopTabBarProps,\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers,\n} from '../types';\nimport MaterialTopTabBar from './MaterialTopTabBar';\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n};\n\nexport default function MaterialTopTabView({\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  return (\n    <TabView<Route<string>>\n      {...rest}\n      onIndexChange={(index) =>\n        navigation.dispatch({\n          ...TabActions.jumpTo(state.routes[index].name),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      navigationState={state}\n      renderTabBar={renderTabBar}\n      renderLazyPlaceholder={({ route }) =>\n        descriptors[route.key].options.lazyPlaceholder?.() ?? null\n      }\n      lazy={({ route }) => descriptors[route.key].options.lazy === true}\n      onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n      onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n      sceneContainerStyle={[\n        { backgroundColor: colors.background },\n        sceneContainerStyle,\n      ]}\n    />\n  );\n}\n"]}